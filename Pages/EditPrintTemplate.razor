@page "/editPrintTemplate"
@using System.Reflection;
@using HiPrintTest.Models;
@inject IMessageService _message

<Modal DefaultMaximized  Visible="true">

<Row>
    <Col Span="24" Style="margin-bottom:24px">
        <Button OnClick='async (e)=>await HiPrint!.SetHostAsync("http://172.23.0.157:17521")'>连接打印客户端</Button>
        <Button OnClick='async (e)=>{var isOpened= await HiPrint!.IsOpenedAsync();_=_message.Info(isOpened.ToString());}'>获取连接状态</Button>
        <Button OnClick='async (e)=>{ PrinterList=await HiPrint!.GetPrinterListAsync();}'>获取打印机列表</Button>
        <RadioGroup TValue="string" >
            @foreach(dynamic printer in PrinterList)
            {
                <Radio Value="@((string)printer.name)">@((string)printer.name)</Radio>
            }
        </RadioGroup>
    </Col>
</Row>

<Row >
    <Col Style="margin-bottom:24px">
    <RadioGroup @bind-Value="@PageType" ButtonStyle="@RadioButtonStyle.Solid" OnChange="async(string e)=>await ChangePageSize()">
            <Radio RadioButton Value="@("A3")">A3</Radio>
            <Radio RadioButton Value="@("A4")">A4</Radio>
            <Radio RadioButton Value="@("A5")">A5</Radio>
            <Radio RadioButton Value="@("B3")">B3</Radio>
            <Radio RadioButton Value="@("B4")">B4</Radio>
            <Radio RadioButton Value="@("B5")">B5</Radio>
            <Popover ContentTemplate="@FragmentChangePageSize" Title="设置纸张宽高(mm)" ComplexAutoCloseAndVisible  Visible="PageSizeVisible"  OnVisibleChange="e=>PageSizeVisible=e" Trigger="@(new AntDesign.Trigger[] { AntDesign.Trigger.Click})">
                <Radio RadioButton Value="@("customer")">自定义</Radio>
            </Popover>
        </RadioGroup>


      <Button Icon="redo" OnClick="async(e)=>await HiPrint!.RotatePaperAsync()">旋转</Button>

      <ButtonGroup>
            <Button OnClick='async (e)=>await HiPrint!.SetElsAlignAsync("left")'>左对齐</Button>
            <Button OnClick='async (e)=>await HiPrint!.SetElsAlignAsync("center")'>水平居中</Button>
            <Button OnClick='async (e)=>await HiPrint!.SetElsAlignAsync("right")'>右对齐</Button>
            <Button OnClick='async (e)=>await HiPrint!.SetElsAlignAsync("top")'>顶部对齐</Button>
            <Button OnClick='async (e)=>await HiPrint!.SetElsAlignAsync("horizontal")'>垂直居中</Button>
            <Button OnClick='async (e)=>await HiPrint!.SetElsAlignAsync("bottom")'>底部对齐</Button>
            <Button OnClick='async (e)=>await HiPrint!.SetElsAlignAsync("distributeHor")'>横向分散</Button>
            <Button OnClick='async (e)=>await HiPrint!.SetElsAlignAsync("distributeVer")'>纵向分散</Button>
       </ButtonGroup>

        <Button Icon="Clear" Danger OnClick="async (e)=>await HiPrint!.ClearAsync()">清空</Button>

        <Button Icon="eye" OnClick="async (e)=>{ Html=await HiPrint!.GetHtmlAsync(Order);PreviewVisible=true;}">预览</Button>
     </Col>
</Row>
            <HiPrint @ref="HiPrint" AfterInit="async (e)=>{ await HiPrint!.BuildDesignerAsync();await BuildProviderAsync();}"></HiPrint>
</Modal>


@*预览框*@
<Modal Visible="PreviewVisible" Width="1000"
       OnCancel="e=>PreviewVisible = false">
    <Row>
       <Col Span="24">
        <Button OnClick="async(e)=>await HiPrint!.PrintAsync(Order)">打印</Button>
        <Button OnClick='async(e)=>await HiPrint!.ToPdfAsync(Order,"打印预览pdf")'>生成Pdf</Button>
       </Col>
    </Row>
    @((MarkupString)Html)
</Modal>


@code {
    private HiPrint? HiPrint { get; set; }

    private string PageType { get; set; } = "A4";

    private int? PageWidth;

    private int? PageHeight;

    private bool PageSizeVisible = false;

    private bool PreviewVisible = false;

    private string Html="";

    private dynamic[] PrinterList = Array.Empty<dynamic>();

    private Order Order = new Order
    {
        订单号 = "XSDD009434433",
        订单类型 = "销售订单",
        客户编号 = "KH0001",
        客户名称 = "上海特斯拉超级工厂",
        业务日期 = DateTime.Now,
        总价 = 45690,
        订单明细 = new OrderItem[] {
               new OrderItem
               {
                产品名称="电脑主机",
                 产品编号="CP000234",
                 数量=23,
               },
                              new OrderItem
               {
                产品名称="CPU",
                 产品编号="CP000231",
                 数量=90,
               },
                              new OrderItem
               {
                产品名称="电磁阀",
                 产品编号="CP000234",
                 数量=23,
               },
          }
    };


    private RenderFragment FragmentChangePageSize =>
    @<AntDesign.Row Style="width:200px">
        <AntDesign.Col Span="11">
            <AntDesign.InputNumber @bind-Value="PageWidth" Min="0"  PlaceHolder="宽(mm)" Style="width:100%"></AntDesign.InputNumber>
        </AntDesign.Col>
        <AntDesign.Col Span="2" Style="text-align:center">~</AntDesign.Col>
        <AntDesign.Col Span="11">
            <AntDesign.InputNumber @bind-Value="PageHeight" Min="0" PlaceHolder="高(mm)" Style="width:100%"></AntDesign.InputNumber>
        </AntDesign.Col>
        <AntDesign.Col Span="24" Style="margin-top:10px">
            <AntDesign.Button Type="@ButtonType.Primary" Style="width:100%" OnClick="e=>PageSizeVisible=false">确定</AntDesign.Button>
        </AntDesign.Col>
        </AntDesign.Row>
    ;

    private async Task BuildProviderAsync()
    {
        var entityProviderCfg = new
        {
            Key = "Entity",
            Options = new
            {
                GroupName = "订单",
                PrintElements = GetPropertyNames(typeof(Order)).Select(propertyName => new
                {
                    Id = propertyName,
                    Type = "txt",
                    Width = 100,
                    Height = 20,
                    Title = propertyName,
                    Field = propertyName,
                }).ToArray().Concat(new object[]
                {
                        new {
                                    Id = "tableCustom",
                                    Type = "tableCustom",
                                    Title = "订单明细",
                                    Field = "订单明细",
                                    Columns =
                                    new object[] { 
                                        GetPropertyNames(typeof(OrderItem)).Select(propertyName=>new
                                       { 
                                        Title = propertyName,
                                        Align = "center",
                                        Field = propertyName,
                                        Width = 100
                                       }).ToArray()
                                    },
                            }
                })
            },
        };

        await HiPrint!.BuildProviderAsync(entityProviderCfg, true);

        var assistProviderCfg = new
        {
            Key = "Assist",
            Options = new
            {
                GroupName = "辅助",
                PrintElements = new object[] {
                            new {
                                Id = "img",
                                Type = "img",
                                Title = "图片",
                            },
                            new {
                                Id = "text",
                                Type = "text",
                                Title = "文本",
                            },
                            new {
                                Id = "hLine",
                                Type = "hLine",
                                Title = "横线",
                            },
                            new {
                                Id = "vLine",
                                Type = "vLine",
                                Title = "竖线",
                            },
                            new {
                                Id = "rect",
                                Type = "rect",
                                Title = "矩形",
                            },
                            new {
                                Id = "oval",
                                Type = "oval",
                                Title = "圆形",
                            },
     },
            },
        };
        await HiPrint!.BuildProviderAsync(assistProviderCfg, false);
    }


    private async Task ChangePageSize()
    {
        if (PageType != "customer")
        {
            await HiPrint!.SetPaperAsync(PageType);
        }
        else
        {
            await HiPrint!.SetPaperAsync(PageWidth??0,PageHeight??0);
        }

    }


    /// <summary>
    /// 获取类的属性名称
    /// </summary>
    /// <param name="type"></param>
    /// <returns></returns>
    private IEnumerable<string> GetPropertyNames(Type type)
    {
        var propertyNames = type
            .GetProperties(BindingFlags.Instance | BindingFlags.Public)
            .Where(f => TypeFilter(f.PropertyType))
            .Select(f => f.Name).ToList();

        return propertyNames;
    }


    private bool TypeFilter(Type type)
    {
        return type.IsEnum || type.GetUnderlyingType().IsEnum ||
          new Type[] { typeof(int), typeof(long), typeof(float), typeof(double), typeof(decimal), typeof(string), typeof(DateTime) }.Contains(type);
    }
}
